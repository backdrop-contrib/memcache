<?php

/**
 * Implements hook_menu().
 */
function memcache_test_menu() {
  $items['memcache-test/lock-acquire'] = [
    'title' => 'Lock acquire',
    'page callback' => 'memcache_test_lock_acquire',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  ];

  $items['memcache-test/lock-exit'] = [
    'title' => 'Lock acquire then exit',
    'page callback' => 'memcache_test_lock_exit',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  ];

  $items['memcache-test/set/%/%'] = [
    'title' => 'Set a value with a key',
    'page callback' => 'memcache_test_set',
    'page arguments' => [2, 3],
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  ];

  $items['memcache-test/get/%'] = [
    'title' => 'Get a value from the cache',
    'page callback' => 'memcache_test_get',
    'page arguments' => [2],
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  ];

  $items['memcache-test/delete-prefix/%'] = [
    'title' => 'Clear multiple items with a cache prefix',
    'page callback' => 'memcache_test_delete_prefix',
    'page arguments' => [2],
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  ];

  $items['memcache-test/delete/%'] = [
    'title' => 'Delete a single cache entry',
    'page callback' => 'memcache_test_delete',
    'page arguments' => [2],
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  ];

  $items['memcache-test/garbage-collection'] = [
    'title' => 'Run cache garbage collection and invalidate temporary items',
    'page callback' => 'memcache_test_garbage_collection',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  ];

  $items['memcache-test/flush'] = [
    'title' => 'Run a full cache flush',
    'page callback' => 'memcache_test_flush',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  ];

  return $items;
}

/**
 * Try to acquire a named lock and report the outcome.
 */
function memcache_test_lock_acquire() {
  if (lock_acquire('memcache_test_lock_acquire')) {
    lock_release('memcache_test_lock_acquire');
    return 'TRUE: Lock successfully acquired in memcache_test_lock_acquire()';
  }
  else {
    return 'FALSE: Lock not acquired in memcache_test_lock_acquire()';
  }
}

/**
 * Try to acquire a specific lock, and then exit.
 */
function memcache_test_lock_exit() {
  if (lock_acquire('memcache_test_lock_exit', 900)) {
    echo 'TRUE: Lock successfully acquired in memcache_test_lock_exit()';
    // The shut-down function should release the lock.
    exit();
  }
  else {
    return 'FALSE: Lock not acquired in memcache_test_lock_exit()';
  }
}

/**
 * Set a value into the cache.
 */
function memcache_test_set($key, $value) {
  cache_set($key, $value, 'memcache_test_bin');
  backdrop_json_output(cache_get($key, 'memcache_test_bin'));
}

/**
 * Set a value into the cache.
 */
function memcache_test_get($key) {
  backdrop_json_output(cache_get($key, 'memcache_test_bin'));
}

/**
 * Clear multiple items with a cache prefix.
 */
function memcache_test_delete_prefix($key) {
  cache('memcache_test_bin')->deletePrefix($key);
  backdrop_json_output($key);
}

/**
 * Clear cache using a specific key.
 */
function memcache_test_delete($key) {
  cache('memcache_test_bin')->delete($key);
  backdrop_json_output($key);
}

/**
 * Run cache garbage collection and invalidate temporary items.
 */
function memcache_test_garbage_collection() {
  cache('memcache_test_bin')->garbageCollection();
  backdrop_json_output();
}

/**
 * Run a full cache flush.
 */
function memcache_test_flush() {
  cache('memcache_test_bin')->flush();
  backdrop_json_output();
}

