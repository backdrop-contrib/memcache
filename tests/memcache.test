<?php
/**
 * @file
 * Test cases for the memcache cache backend.
 */

class MemcacheTestCase extends BackdropWebTestCase {

  protected $profile = 'testing';

  protected $default_bin = 'cache_memcache';

  protected $default_cid = 'test_temporary';

  protected $default_value = 'MemcacheTest';

  /**
   * Re-implements BackdropWebTestCase::setUp() so that we can override
   * $settings.
   *
   * @see BackdropWebTestCase::setUp()
   */
  public function setUp($modules = []) {
    parent::setUp($modules);
    global $settings;

    // Setup our own memcache variables here. We can't use variable_set() yet.
    if ($this->default_bin) {
      state_set("cache_flush_$this->default_bin", 0);
      $settings["cache_class_$this->default_bin"] = 'BackdropMemcache';
    }

  }

  /**
   * Test that memcache is configured correctly.
   */
  public function testCacheBin() {
    if ($this->default_bin) {
      // Confirm that the default cache bin is handled by memcache.
      $this->assertEqual(get_class(cache($this->default_bin)), 'BackdropMemcache', 'Memcache caching is configured correctly.');
    }
  }

  /**
   * Check whether or not a cache entry exists.
   *
   * @param string $cid
   *   The cache id.
   * @param mixed $var
   *   The variable the cache should contain.
   * @param string $bin_name
   *   Defaults to $this->default_bin. The bin the cache item was stored in.
   *
   * @return bool
   *   TRUE on pass, FALSE on fail.
   */
  protected function checkCacheExists($cid, $var, $bin_name = NULL) {
    if ($bin_name == NULL) {
      $bin_name = $this->default_bin;
    }

    $cache = cache_get($cid, $bin_name);
    return isset($cache->data) && $cache->data == $var;
  }

  /**
   * Assert or a cache entry exists.
   *
   * @param string $message
   *   Message to display.
   * @param mixed $var
   *   Defaults to $this->default_value. The variable the cache should contain.
   * @param string $cid
   *   Defaults to $this->default_cid. The cache id.
   * @param string $bin
   *   Defaults to $this->default_bin. The bin the cache item was stored in.
   */
  protected function assertCacheExists($message, $var = NULL, $cid = NULL, $bin = NULL) {
    if ($bin == NULL) {
      $bin = $this->default_bin;
    }
    if ($cid == NULL) {
      $cid = $this->default_cid;
    }
    if ($var == NULL) {
      $var = $this->default_value;
    }

    $this->assertTrue($this->checkCacheExists($cid, $var, $bin), $message);
  }

  /**
   * Assert or a cache entry has been removed.
   *
   * @param string $message
   *   Message to display.
   * @param string $cid
   *   Defaults to $this->default_cid. The cache id.
   * @param string $bin
   *   Defaults to $this->default_bin. The bin the cache item was stored in.
   */
  public function assertCacheRemoved($message, $cid = NULL, $bin = NULL) {
    if ($bin == NULL) {
      $bin = $this->default_bin;
    }
    if ($cid == NULL) {
      $cid = $this->default_cid;
    }

    $cache = cache_get($cid, $bin);
    $this->assertFalse($cache, $message);
  }

  /**
   * Reloads internal BackdropMemcache variables.
   */
  protected function resetVariables() {
    if ($this->default_bin) {
      $cache = cache($this->default_bin);
      if ($cache instanceof BackdropMemcache) {
        $cache->reloadVariables();
      }
    }
  }

}

class MemcacheSavingCase extends MemcacheTestCase {

  /**
   * Test the saving and restoring of a string.
   */
  public function testString() {
    $this->checkVariable($this->randomName(100));
  }

  /**
   * Test the saving and restoring of an integer.
   */
  public function testInteger() {
    $this->checkVariable(100);
  }

  /**
   * Test the saving and restoring of a double.
   */
  public function testDouble() {
    $this->checkVariable(1.29);
  }

  /**
   * Test the saving and restoring of an array.
   */
  public function testArray() {
    $this->checkVariable([
      'backdrop1',
      'backdrop2' => 'backdrop3',
      'backdrop4' => ['backdrop5', 'backdrop6'],
    ]);
  }

  /**
   * Test the saving and restoring of an object.
   */
  public function testObject() {
    $test_object = new stdClass();
    $test_object->test1 = $this->randomName(100);
    $test_object->test2 = 100;
    $test_object->test3 = [
      'backdrop1',
      'backdrop2' => 'backdrop3',
      'backdrop4' => ['backdrop5', 'backdrop6'],
    ];

    cache_set('test_object', $test_object, $this->default_bin);
    $cache = cache_get('test_object', $this->default_bin);
    $this->assertTrue(isset($cache->data) && $cache->data == $test_object, 'Object is saved and restored properly.');
  }

  /**
   * Test save and restoring a string with a long key.
   */
  public function testStringLongKey() {
    $this->checkVariable($this->randomName(100), 'ThequickbrownfoxjumpsoverthelazydogThequickbrownfoxjumpsoverthelazydogThequickbrownfoxjumpsoverthelazydogThequickbrownfoxjumpsoverthelazydogThequickbrownfoxjumpsoverthelazydogThequickbrownfoxjumpsoverthelazydogThequickbrownfoxjumpsoverthelazydogThequickbrownfoxjumpsoverthelazydog');
  }

  /**
   * Test save and restoring a string using a key with special characters.
   */
  public function testStringSpecialKey() {
    $this->checkVariable($this->randomName(100), 'Qwerty!@#$%^&*()_+-=[]\;\',./<>?:"{}|£¢');
  }

  /**
   * Test saving and restoring an integer value directly with dmemcache_set().
   */
  function testIntegerValue() {
    $key = $this->randomName(100);
    $val = rand(1, 1000);
    dmemcache_set($key, $val, 0, 'cache');
    $cache = dmemcache_get($key, 'cache');
    $this->assertTrue($val === $cache, format_string('Integer is saved and restored properly with key @key', ['@key' => $key]));
  }

  /**
   * Test saving and restoring a very large value (>1MiB).
   */
  function testLargeValue() {
    $this->checkVariable(array_fill(0, 500000, rand()));
  }

  /**
   * Test save and restoring a string with a long key and a very large value.
   */
  function testLongKeyLargeValue() {
    $this->checkVariable(array_fill(0, 500000, rand()), $this->randomName(300));
  }

  /**
   * Check or a variable is stored and restored properly.
   */
  public function checkVariable($var, $key = 'test_var') {
    cache_set($key, $var, $this->default_bin);
    $cache = cache_get($key, $this->default_bin);
    $this->assertTrue(isset($cache->data) && $cache->data === $var, format_string('@type is saved and restored properly!key.', [
      '@type' => ucfirst(gettype($var)),
      '!key' => ($key != 'test_var') ? format_string(' with key @key', ['@key' => $key]) : '',
    ]));
  }

}

/**
 * Test cache_get_multiple().
 */
class MemcacheGetMultipleUnitTest extends MemcacheTestCase {

  /**
   * Test cache_get_multiple().
   */
  public function testCacheMultiple() {
    $cache_bin = cache($this->default_bin);

    $item1 = $this->randomName(10);
    $item2 = $this->randomName(10);
    $cache_bin->set('test:item1', $item1);
    $cache_bin->set('test:item2', $item2);
    $this->assertTrue($this->checkCacheExists('test:item1', $item1), 'Item 1 is cached.');
    $this->assertTrue($this->checkCacheExists('test:item2', $item2), 'Item 2 is cached.');

    // Fetch both records from the database with cache_get_multiple().
    $item_ids = ['test:item1', 'test:item2'];
    $items = $cache_bin->getMultiple($item_ids);
    $this->assertEqual($items['test:item1']->data, $item1, 'Item was returned from cache successfully.');
    $this->assertEqual($items['test:item2']->data, $item2, 'Item was returned from cache successfully.');

    $this->assertTrue(empty($item_ids), 'Ids of returned items have been removed.');

    // Remove one item from the cache.
    $cache_bin->delete('test:item2');

    // Confirm that only one item is returned by cache_get_multiple().
    $item_ids = ['test:item1', 'test:item2'];
    $items = $cache_bin->getMultiple($item_ids);
    $this->assertEqual($items['test:item1']->data, $item1, 'Item was returned from cache successfully.');
    $this->assertFalse(isset($items['test:item2']), 'Item was not returned from the cache.');
    $this->assertTrue(count($items) == 1, 'Only valid cache entries returned.');
    $this->assertTrue(count($item_ids) == 1, 'Invalid cache ids still present.');
  }

}

/**
 * Test cache clearing methods.
 */
class MemcacheClearCase extends MemcacheTestCase {

  /**
   * @see MemcacheTestCase::setUp()
   */
  public function setUp($modules = []) {
    parent::setUp(array_merge($modules, ['memcache_test']));
    $this->default_value = $this->randomName(10);
  }

  /**
   * Test full bin flushes.
   */
  public function testCacheFlush() {
    cache($this->default_bin)->set('test_cid_clear1', $this->default_value);
    cache($this->default_bin)->set('test_cid_clear2', $this->default_value);
    $this->assertTrue($this->checkCacheExists('test_cid_clear1', $this->default_value)
      && $this->checkCacheExists('test_cid_clear2', $this->default_value),
      'Two caches were created fot testing cache flush.');

    cache($this->default_bin)->flush();
    $this->assertFalse($this->checkCacheExists('test_cid_clear1', $this->default_value)
      || $this->checkCacheExists('test_cid_clear2', $this->default_value),
      'Two caches removed after flushing entire bin.');

    // Set a cache item with an expiry.
    cache($this->default_bin)->set('test_cid', $this->default_value, REQUEST_TIME + 3600);
    $this->assertTrue($this->checkCacheExists('test_cid', $this->default_value), 'Cache item was created successfully.');

    // Set a permanent cache item.
    cache($this->default_bin)->set('test_cid_2', $this->default_value);

    // Run garbage collection. This should NOT affect the permanent or set
    // lifetime cache entries.
    cache($this->default_bin)->garbageCollection();

    $this->assertTrue($this->checkCacheExists('test_cid', $this->default_value), 'Cache item with set expiration preserved on garbage collection.');
    $this->assertTrue($this->checkCacheExists('test_cid_2', $this->default_value), 'Cache item with permanent lifetime preserved on garbage collection.');
  }

  /**
   * Test different wildcards to verify the wildcard optimizations.
   */
  public function testWildCardOptimizations() {
    $cache_bin = cache($this->default_bin);
    // Set and clear a cache with a short cid/wildcard.
    $cache_bin->set('foo:1', $this->default_value);

    $this->assertCacheExists(t('Foo cache was set.'), $this->default_value, 'foo:1');

    $cache_bin->deletePrefix('foo');
    $this->assertCacheRemoved(t('Foo cache was invalidated.'), 'foo:1');

    // Set additional longer caches.
    $cache_bin->set('foobar', $this->default_value);
    $cache_bin->set('foofoo', $this->default_value);

    $this->assertCacheExists(t('Foobar cache set.'), $this->default_value, 'foobar');
    $this->assertCacheExists(t('Foofoo cache set.'), $this->default_value, 'foofoo');

    // Clear one of them with a wildcard and make sure the other one is still
    // valid.
    $cache_bin->deletePrefix('foobar');
    $this->assertCacheRemoved(t('Foobar cache invalidated.'), 'foobar');
    $this->assertCacheExists(t('Foofoo cache still valid.'), $this->default_value, 'foofoo');

    // Set and clear a cache with a different, equally short cid/wildcard.
    $cache_bin->set('bar:1', $this->default_value);
    $this->assertCacheExists(t('Bar cache was set.'), $this->default_value, 'bar:1');

    $cache_bin->deletePrefix('bar');
    $this->assertCacheRemoved(t('Bar cache invalidated.'), 'bar:1');
    $this->assertCacheExists(t('Foofoo cache still valid.'), $this->default_value, 'foofoo');

    // Clear cache with an even shorter wildcard. This results in a full bin
    // bin clear, all entries are marked invalid.
    $cache_bin->set('bar:2', $this->default_value);
    $cache_bin->deletePrefix('ba');
    $this->assertCacheRemoved(t('Bar:1 cache invalidated.'), 'bar:1');
    $this->assertCacheRemoved(t('Bar:2 cache invalidated.'), 'bar:2');
    $this->assertCacheRemoved(t('Foofoo cache invalidated.'), 'foofoo');
  }

  /**
   * Test CACHE_TEMPORARY and CACHE_PERMANENT behaviour.
   */
  public function testClearTemporaryPermanent() {
    $cache_bin = cache($this->default_bin);

    $cache_bin->set('test_cid_clear_temporary', $this->default_value, CACHE_TEMPORARY);
    $cache_bin->set('test_cid_clear_permanent', $this->default_value, CACHE_PERMANENT);
    $cache_bin->set('test_cid_clear_future', $this->default_value, REQUEST_TIME + 3600);

    $this->assertTrue($this->checkCacheExists('test_cid_clear_temporary', $this->default_value)
      && $this->checkCacheExists('test_cid_clear_permanent', $this->default_value)
      && $this->checkCacheExists('test_cid_clear_future', $this->default_value),
      'Three cache items were created for checking cache expiry.');

    // This should clear only items with no lifetime (CACHE_TEMPORARY).
    $cache_bin->garbageCollection();

    $this->assertFalse($this->checkCacheExists('test_cid_clear_temporary', $this->default_value),
      'Temporary cache item was removed after clearing cid NULL.');
    $this->assertTrue($this->checkCacheExists('test_cid_clear_permanent', $this->default_value),
      'Permanent cache item was not removed after clearing cid NULL.');
    $this->assertTrue($this->checkCacheExists('test_cid_clear_future', $this->default_value),
      'Future cache item was not removed after clearing cid NULL.');
  }

  /**
   * Test clearing using a cid.
   */
  public function testDeleteCidTest() {
    $cache_bin = cache($this->default_bin);
    $cache_bin->set('test_cid_clear', $this->default_value);

    $this->assertCacheExists('Cache was set for deleting cid.', $this->default_value, 'test_cid_clear');
    $cache_bin->delete('test_cid_clear');

    $this->assertCacheRemoved('Cache was removed after clearing cid.', 'test_cid_clear');

    $cache_bin->set('test_cid_clear1', $this->default_value);
    $cache_bin->set('test_cid_clear2', $this->default_value);
    $this->assertTrue($this->checkCacheExists('test_cid_clear1', $this->default_value)
      && $this->checkCacheExists('test_cid_clear2', $this->default_value),
      'Two caches were created for checking garbage collection.');
    $cache_bin->garbageCollection();
    $this->assertTrue($this->checkCacheExists('test_cid_clear1', $this->default_value)
      && $this->checkCacheExists('test_cid_clear2', $this->default_value),
      'Two caches still exists after garbage collection.');
  }

  /**
   * Test cache clears using wildcard prefixes.
   */
  public function testClearWildcardPrefix() {
    $this->resetVariables();
    $cache_bin = cache($this->default_bin);

    $cache_bin->set('test_cid_clear:1', $this->default_value);
    $cache_bin->set('test_cid_clear:2', $this->default_value);
    $this->assertTrue($this->checkCacheExists('test_cid_clear:1', $this->default_value)
      && $this->checkCacheExists('test_cid_clear:2', $this->default_value),
      'Two caches were created for checking delete by prefix.');
    $cache_bin->deletePrefix('test_cid_clear:');
    $this->assertFalse($this->checkCacheExists('test_cid_clear:1', $this->default_value)
      || $this->checkCacheExists('test_cid_clear:2', $this->default_value),
      'Two caches removed after clearing cid substring by prefix.');

    // Test for the case where a wildcard object disappears, for example a
    // partial memcache restart or eviction.
    $cache_bin->set('test_cid_clear:1', $this->default_value);
    $this->assertTrue($this->checkCacheExists('test_cid_clear:1', $this->default_value), 'The cache was created successfully.');
    $cache_bin->deletePrefix('test_');
    $this->assertFalse($this->checkCacheExists('test_cid_clear:1', $this->default_value), 'The cache was cleared successfully.');

    // Delete the wildcard manually to simulate an eviction.
    $wildcard = '.wildcard-test_cid_clear:';
    dmemcache_delete($wildcard, $this->default_bin);
    $this->assertFalse($this->checkCacheExists('test_cid_clear:1', $this->default_value), 'The cached item was empty after a manual eviction.');
  }

  /**
   * Test wildcard flushing on separate pages to ensure no static cache is used.
   */
  public function testClearWildcardOnSeparatePages() {
    $random_wildcard = $this->randomName(2) . '_' . $this->randomName(3);
    $random_key = $random_wildcard . '_' . $this->randomName(4) . '_' . $this->randomName(2);
    $random_value = $this->randomName();

    // These are untested but maintained for future use.
    //$this->backdropGetAJAX('memcache-test/garbage-collection');
    //$this->backdropGetAJAX('memcache-test/flush');

    $data = $this->backdropGetAJAX('memcache-test/set/' . $random_key . '/' . $random_value);

    $this->assertTrue(is_array($data), 'Cache has data.');
    $this->assertEqual($random_key, $data['cid'], 'Cache keys match.');
    $this->assertEqual($random_value, $data['data'], 'Cache values match.');

    $data = $this->backdropGetAJAX('memcache-test/get/' . $random_key);
    $this->assertEqual($random_key, $data['cid'], 'Cache keys match.');
    $this->assertEqual($random_value, $data['data'], 'Cache values match.');

    $this->backdropGet('memcache-test/delete/' . $random_key);

    $data = $this->backdropGetAJAX('memcache-test/get/' . $random_key);
    $this->assertFalse($data, 'Cache value at specific key was properly flushed.');

    $data = $this->backdropGetAJAX('memcache-test/set/' . $random_key . '/' . $random_value);

    $this->assertTrue(is_array($data), 'Cache has data.');
    $this->assertEqual($random_key, $data['cid'], 'Cache keys match.');
    $this->assertEqual($random_value, $data['data'], 'Cache values match.');

    $data = $this->backdropGetAJAX('memcache-test/get/' . $random_key);
    $this->assertEqual($random_key, $data['cid'], 'Cache keys match.');
    $this->assertEqual($random_value, $data['data'], 'Cache values match.');

    $this->backdropGet('memcache-test/delete-prefix/' . $random_wildcard);

    $data = $this->backdropGetAJAX('memcache-test/get/' . $random_key);
    $this->assertFalse($data, 'Cache was properly flushed.');
  }

}

/**
 * Tests memcache stampede protection.
 */
class MemcacheStampedeProtection extends MemcacheTestCase {

  /**
   * Tests the opt-out functionality of stampede protection using a unit test.
   */
  public function testStampedeProtectionIgnoringUnit() {
    global $settings;

    // Set up a new test bin, to be able to override the used class.
    $settings['cache_class_test_bin'] = 'MockBackdropMemcache';
    $settings['cache_class_test_bin_2'] = 'MockBackdropMemcache';

    // Set up stampede protection.
    $settings['memcache_stampede_protection'] = TRUE;
    $settings['memcache_stampede_protection_ignore'] = [
      'test_bin',
      'test_bin_2' => [
        'cid_no_prefix',
        'cid_with_prefix:*',
      ],
    ];

    // Ensure the mock object is used.
    /** @var \MockBackdropMemcache $cache_object_bin */
    $cache_object_bin = cache('test_bin');
    $this->assertEqual(get_class($cache_object_bin), 'MockBackdropMemcache');
    /** @var \MockBackdropMemcache $cache_object_bin2 */
    $cache_object_bin2 = cache('test_bin_2');
    $this->assertEqual(get_class($cache_object_bin2), 'MockBackdropMemcache');

    // Test ignoring of an entire bin.
    $this->assertFalse($cache_object_bin->isStampedeProtected('test_cid'), 'Disable stampede protection for cid contained in a disabled bin.');
    $this->assertFalse($cache_object_bin->isStampedeProtected('cid_no_prefix'), 'Disable stampede protection for cid without prefix in a disabled bin.');
    $this->assertFalse($cache_object_bin->isStampedeProtected('cid_with_prefix:example'), 'Disable stampede protection for cid with prefix in a disabled bin.');

    // Test ignoring of specific CIDs.
    $this->assertTrue($cache_object_bin2->isStampedeProtected('test_cid'), 'Don\'t disable stampede protection for a specific non-matching cid.');
    $this->assertFalse($cache_object_bin2->isStampedeProtected('cid_no_prefix'), 'Disable stampede protection for a specific cid.');
    $this->assertFalse($cache_object_bin2->isStampedeProtected('cid_with_prefix:example'), 'Disable stampede protection for a specific cid with disabled prefix.');
    $this->assertTrue($cache_object_bin2->isStampedeProtected('cid_with_other_prefix:example'), 'Don\'t disable stampede protection for a specific cid with a different prefix.');
  }

}

include_once __DIR__ . '/../memcache.inc';

/**
 * Wraps BackdropMemcache class in order to be able to call a protected method.
 */
class MockBackdropMemcache extends BackdropMemcache {

  public function isStampedeProtected($cid) {
    return parent::stampedeProtected($cid);
  }

}

/**
 * Test some real world cache scenarios with default modules.
 *
 * Please make sure you've set the proper memcache settings in the settings.php.
 * Looks like I've not chance to change the cache settings to what's needed by
 * this test.
 */
class MemcacheRealWorldCase extends MemcacheTestCase {

  protected $profile = 'standard';

  protected $default_bin = 'cache_menu';

  /**
   * Test if the menu module caching acts as expected.
   *
   * The menu module clears the affected menu if a menu item is changed using
   * wildcards.
   */
  public function testMenu() {
    // Create and login user.
    $account = $this->backdropCreateUser([
      'access administration pages',
      'administer blocks',
      'administer menu',
      'create post content',
    ]);
    $this->backdropLogin($account);

    // Add Menu Link to test with.
    $item = $this->addMenuLink();
    $original_title = $item['link_title'];

    // Check if menu link is displayed.
    $this->backdropGet('');
    $this->assertText($original_title, 'Menu item displayed in frontend');

    // Change menu item multiple times and check if the change is reflected.
    for ($i = 0; $i < 3; $i++) {
      // Edit menu link.
      $edit = [];
      $edit['link_title'] = $this->randomName(16);
      $this->backdropPost("admin/structure/menu/item/{$item['mlid']}/edit", $edit, t('Save'));
      if (!$this->assertResponse(200)) {
        // One fail is enough.
        break;
      }
      // Verify edited menu link.
      if (!$this->backdropGet('admin/structure/menu/manage/' . $item['menu_name'])) {
        // One fail is enough.
        break;
      }
      $this->assertText($edit['link_title'], 'Menu link was edited');
      $this->backdropGet('');
      if (!$this->assertText($edit['link_title'], 'Change is reflected in frontend')) {
        // One fail is enough.
        break;
      }
    }
  }

  /**
   * Adds a menu link.
   *
   * @see MenuTestCase::addMenuLink()
   */
  public function addMenuLink($plid = 0, $link = '<front>', $menu_name = 'main-menu') {
    // View add menu link page.
    $this->backdropGet("admin/structure/menu/manage/$menu_name/add");
    $this->assertResponse(200);

    $title = '!OriginalLink_' . $this->randomName(16);
    $edit = [
      'link_path' => $link,
      'link_title' => $title,
      'description' => '',
      // Use this to disable the menu and test.
      'enabled' => TRUE,
      // Setting this to true should test whether it works when we do the
      // std_user tests.
      'expanded' => TRUE,
      'parent' => $menu_name . ':' . $plid,
      'weight' => '0',
    ];

    // Add menu link.
    $this->backdropPost(NULL, $edit, t('Save'));
    $this->assertResponse(200);
    // Unlike most other modules, there is no confirmation message displayed.
    $this->assertText($title, 'Menu link was added');

    $item = db_query('SELECT * FROM {menu_links} WHERE link_title = :title', [':title' => $title])->fetchAssoc();
    return $item;
  }

}

/**
 * Test statistics generation.
 */
class MemcacheStatisticsTestCase extends MemcacheTestCase {

  /**
   * @see MemcacheTestCase::setUp()
   */
  public function setUp($modules = []) {
    parent::setUp(array_merge($modules, ['memcache_admin']));
  }

  /**
   * Checks for early bootstrap statistics.
   *
   * Tests that bootstrap cache commands are recorded when statistics are
   * enabled and tests that statistics are not recorded when the user doesn't
   * have access or displaying statistics is disabled.
   */
  public function testBootstrapStatistics() {
    global $_dmemcache_stats;
    // Expected statistics for cache_set() and cache_get().
    $test_full_key = dmemcache_key($this->default_cid, $this->default_bin);

    // List of bootstrap cids to check for.
    $cache_bootstrap_cids = [
      'bootstrap_modules',
      'system_list',
      'module_implements',
    ];

    // Turn on memcache statistics.
    config_set('memcache_admin.settings', 'show_statistics', TRUE);
    backdrop_static_reset('dmemcache_stats_init');

    $this->backdropGet('user/login');
    // Check that statistics are not displayed for anonymous users.
    $this->assertNoRaw('<div id="memcache-devel">', 'Statistics not present.');

    // Create and login a user without access to view statistics.
    $account = $this->backdropCreateUser();
    $this->backdropLogin($account);

    // Check that statistics are not displayed for authenticated users without
    // permission.
    $this->assertNoRaw('<div id="memcache-devel">', 'Statistics not present.');

    // Create and login a user with access to view statistics.
    $account = $this->backdropCreateUser(['access memcache statistics']);
    $this->backdropLogin($account);

    $this->backdropGet('user');
    // Check that bootstrap statistics are visible.
    foreach ($cache_bootstrap_cids as $stat) {
      $key = $GLOBALS['backdrop_test_info']['test_run_id'] . 'bootstrap-' . $stat;
      $this->assertRaw("<td>get</td><td>bootstrap</td><td>{$key}</td>", format_string('Key @key found.', ['@key' => $key]));
    }

    // Clear bootstrap cache items.
    foreach ($cache_bootstrap_cids as $stat) {
      cache('bootstrap')->delete($stat);
    }

    $this->backdropGet('user');
    // Check that early bootstrap statistics are still visible and are being
    // set too, after they were removed.
    foreach ($cache_bootstrap_cids as $stat) {
      $key = $GLOBALS['backdrop_test_info']['test_run_id'] . 'bootstrap-' . $stat;
      $this->assertRaw("<td>get</td><td>bootstrap</td><td>{$key}</td>", format_string('Key @key found (get).', ['@key' => $key]));
      // @todo: This set is missing because it happens in the background
      // processing after the page is delivered.
      //$this->assertRaw("<td>set</td><td>bootstrap</td><td>{$key}</td>", format_string('Key @key found (set).', array('@key' => $key)));
    }

    // Clear the internal statistics store.
    $_dmemcache_stats = ['all' => [], 'ops' => []];
    cache($this->default_bin)->get($this->default_cid);
    $internal_keys = [
      '_wildcard_flushes',
      '_flush_timestamp',
      '_garbage_collection_timestamp',
    ];
    // The first three cache gets should be the internal keys.
    foreach ($internal_keys as $index => $internal_key) {
      // No flush timestamp will be set yet.
      $expected_status = $internal_key === '_flush_timestamp' ? 'miss' : 'hit';
      $stat_key = $GLOBALS['backdrop_test_info']['test_run_id'] . 'bootstrap-' . $internal_key;
      $this->assertEqual($_dmemcache_stats['all'][$index][1], 'get', "Get action on internal key $internal_key successful.");
      $this->assertEqual($_dmemcache_stats['all'][$index][2], 'bootstrap', "Internal $internal_key stored in bootstrap bin.");
      $this->assertEqual($_dmemcache_stats['all'][$index][3], $stat_key, "Internal key $internal_key found.");
      $this->assertEqual($_dmemcache_stats['all'][$index][4], $expected_status, "Get action on internal key $internal_key is a $expected_status.");
    }

    // Clear the internal statistics store.
    $_dmemcache_stats = ['all' => [], 'ops' => []];
    // Check that cache_set() statistics are being recorded.
    cache_set($this->default_cid, $this->default_value, $this->default_bin);
    $this->assertEqual($_dmemcache_stats['all'][0][1], 'set', 'Set action recorded.');
    $this->assertEqual($_dmemcache_stats['all'][0][4], 'hit', 'Set action successful.');
    $this->assertNotNull($_dmemcache_stats['ops']['set']);

    // Clear the internal statistics store.
    $_dmemcache_stats = ['all' => [], 'ops' => []];
    // Check that cache_get() statistics are being recorded.
    cache_get($this->default_cid, $this->default_bin);
    $this->assertEqual($_dmemcache_stats['all'][0][1], 'get', 'Get action recorded.');
    $this->assertEqual($_dmemcache_stats['all'][0][4], 'hit', 'Get action successful.');
    $this->assertNotNull($_dmemcache_stats['ops']['get']);

    // Turn off memcache statistics.
    config_set('memcache_admin.settings', 'show_statistics', FALSE);
    backdrop_static_reset('dmemcache_stats_init');

    $this->backdropGet('<front>');
    // Check that statistics are not recorded when the user has access, but
    // statistics are disabled.
    $this->assertNoRaw('<div id="memcache-devel">', 'Statistics not present.');

    // Clear the internal statistics store.
    $_dmemcache_stats = ['all' => [], 'ops' => []];
    // Confirm that statistics are not recorded for set()'s when disabled.
    cache_set($this->default_cid, $this->default_value, $this->default_bin);
    $this->assertEqual($_dmemcache_stats, ['all' => [], 'ops' => []]);

    // Clear the internal statistics store.
    $_dmemcache_stats = ['all' => [], 'ops' => []];
    // Confirm that statistics are not recorded for get()'s when disabled.
    cache_get($this->default_cid, $this->default_bin);
    $this->assertEqual($_dmemcache_stats, ['all' => [], 'ops' => []]);
  }

}
